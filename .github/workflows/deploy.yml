name: Release and Deploy

on:
 push:
   branches:
     - main
 workflow_dispatch:

jobs:
 release_and_deploy:
   runs-on: ubuntu-latest
   
   steps:
     ### 1. 저장소 체크아웃
     - name: Checkout repository
       uses: actions/checkout@v3
       with:
         token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

     ### 2. Node.js 환경 설정
     - name: Setup Node.js
       uses: actions/setup-node@v3
       with:
         node-version: "18"

     ### 3. package.json에서 버전 읽기
     - name: Read Version from package.json
       id: read_version
       run: |
         VERSION=$(node -p "require('./package.json').version")
         echo "Version from package.json: $VERSION"
         echo "VERSION=$VERSION" >> $GITHUB_ENV

     ### 4. AWS Credentials 설정
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ secrets.AWS_REGION }}

     ### 5. 프로젝트 빌드 및 패키징
     - name: Build Project
       env:
         CI: false
         REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}
         REACT_APP_BACKEND_URL: ${{ secrets.REACT_APP_BACKEND_URL }}
         REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}
         REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
         REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
         REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
         REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
         REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID }}
         REACT_APP_GITHUB_CLIENT_ID: ${{ secrets.REACT_APP_GITHUB_CLIENT_ID }}
         REACT_APP_GITHUB_CLIENT_SECRET: ${{ secrets.REACT_APP_GITHUB_CLIENT_SECRET }}
       run: |
         npm install
         npm run build
         tar -czf build.tar.gz build/

     ### 6. S3에 업로드
     - name: Upload to S3
       run: |
         aws s3 cp build.tar.gz s3://${{ secrets.S3_BUCKET }}/config/narrativa-admin.tar.gz

     ### 7. EC2에서 배포 실행
     - name: Deploy to EC2
       run: |
         aws ssm send-command \
           --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
           --document-name "AWS-RunShellScript" \
           --parameters commands=[
             "cd /home/ubuntu",
             "aws s3 cp s3://${{ secrets.S3_BUCKET }}/config/narrativa-admin.tar.gz .",
             "tar -xzf narrativa-admin.tar.gz",
             "docker stop narrativa-admin || true",
             "docker rm narrativa-admin || true",
             "docker rmi narrativa-admin || true",
             "docker build -t narrativa-admin .",
             "docker run -d -p 3030:3030 --name narrativa-admin narrativa-admin",
             "rm -f narrativa-admin.tar.gz"
           ]

     ### 8. Git PAT 설정
     - name: Configure Git to Use PAT
       run: |
         git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}

     ### 9. 태그 생성 및 푸시
     - name: Create and Push Tag
       run: |
         TAG="v${{ env.VERSION }}"
         echo "Creating tag: $TAG"
         git config user.name "GitHub Actions Bot"
         git config user.email "actions@github.com"
         git tag $TAG
         git push origin $TAG

     ### 10. 릴리즈 노트 생성
     - name: Generate Release Notes
       id: generate_notes
       run: |
         echo "## Release v${{ env.VERSION }}" > notes.md
         echo "### Deployment Information" >> notes.md
         echo "- Deployment Date: $(date +'%Y-%m-%d %H:%M:%S')" >> notes.md
         echo "### Changes" >> notes.md
         git log $(git describe --tags --abbrev=0)..HEAD --oneline >> notes.md
         echo "notes_body=$(cat notes.md)" >> $GITHUB_ENV

     ### 11. 릴리즈 생성
     - name: Create Release with Notes
       uses: actions/create-release@v1
       env:
         GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
       with:
         tag_name: "v${{ env.VERSION }}"
         release_name: "Release v${{ env.VERSION }}"
         body: ${{ env.notes_body }}
         draft: false
         prerelease: false
