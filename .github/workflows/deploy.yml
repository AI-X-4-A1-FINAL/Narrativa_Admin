name: Release and Deploy

on:
 push:
   branches:
     - main
 workflow_dispatch:

jobs:
 release_and_deploy:
   runs-on: ubuntu-latest
   
   steps:
     ### 1. 저장소 체크아웃
     - name: Checkout repository
       uses: actions/checkout@v3
       with:
         token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

     ### 2. Node.js 환경 설정
     - name: Setup Node.js
       uses: actions/setup-node@v3
       with:
         node-version: "18"

     ### 3. package.json에서 버전 읽기
     - name: Read Version from package.json
       id: read_version
       run: |
         VERSION=$(node -p "require('./package.json').version")
         echo "Version from package.json: $VERSION"
         echo "VERSION=$VERSION" >> $GITHUB_ENV

     ### 4. AWS Credentials 설정
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ secrets.AWS_REGION }}

     ### 5. 프로젝트 빌드 및 Docker 이미지 생성
     - name: Build Project and Create Docker Image
       env:
         CI: false
         REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}
         REACT_APP_BACKEND_URL: ${{ secrets.REACT_APP_BACKEND_URL }}
         REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}
         REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
         REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
         REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
         REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
         REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID }}
         REACT_APP_GITHUB_CLIENT_ID: ${{ secrets.REACT_APP_GITHUB_CLIENT_ID }}
         REACT_APP_GITHUB_CLIENT_SECRET: ${{ secrets.REACT_APP_GITHUB_CLIENT_SECRET }}
       run: |
         # 프로젝트 빌드
         npm install
         npm run build
         
         # Docker 이미지 빌드
         docker build -t narrativa-admin:latest .
         
         # Docker 이미지 확인
         docker images
         
         # Docker 이미지를 tar 파일로 저장
         docker save -o narrativa-admin.tar narrativa-admin:latest
         
         # 생성된 tar 파일 확인
         ls -l narrativa-admin.tar

     ### 6. SSH 설정
     - name: Configure SSH
       run: |
         mkdir -p ~/.ssh
         echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/narraa-admin.pem
         chmod 600 ~/.ssh/narraa-admin.pem
         ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

     ### 7. EC2로 파일 전송 및 배포
     - name: Deploy to EC2
       run: |
         scp -i ~/.ssh/narraa-admin.pem narrativa-admin.tar ubuntu@${{ secrets.EC2_HOST }}:~/
         ssh -i ~/.ssh/narraa-admin.pem ubuntu@${{ secrets.EC2_HOST }} '
           cd /home/ubuntu
           docker stop narrativa-admin || true
           docker rm narrativa-admin || true
           docker rmi narrativa-admin || true
           docker load -i narrativa-admin.tar
           docker run -d -p 3030:3030 --name narrativa-admin narrativa-admin
           rm -f narrativa-admin.tar
         '

     ### 8. Git PAT 설정
     - name: Configure Git to Use PAT
       run: |
         git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}

     ### 9. 태그 생성 및 푸시
     - name: Create and Push Tag
       run: |
         TAG="v${{ env.VERSION }}"
         echo "Creating tag: $TAG"
         git config user.name "GitHub Actions Bot"
         git config user.email "actions@github.com"
         git tag $TAG
         git push origin $TAG

     ### 10. 릴리즈 노트 생성
     - name: Generate Release Notes
       id: generate_notes
       run: |
         # 임시 파일에 릴리즈 노트 내용 작성
         echo "## Release v${{ env.VERSION }}" > release_notes.txt
         echo "" >> release_notes.txt
         echo "### Deployment Information" >> release_notes.txt
         echo "- Deployment Date: $(date +'%Y-%m-%d %H:%M:%S')" >> release_notes.txt
         echo "" >> release_notes.txt
         echo "### Changes" >> release_notes.txt
         git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --oneline >> release_notes.txt
         
         # GITHUB_ENV에 멀티라인 값 설정
         {
           echo "RELEASE_NOTES<<EOF"
           cat release_notes.txt
           echo "EOF"
         } >> $GITHUB_ENV

     ### 11. 릴리즈 생성
     - name: Create Release with Notes
       uses: actions/create-release@v1
       env:
         GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
       with:
         tag_name: "v${{ env.VERSION }}"
         release_name: "Release v${{ env.VERSION }}"
         body: ${{ env.RELEASE_NOTES }}
         draft: false
         prerelease: false
