name: Release and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release_and_deploy:
    runs-on: ubuntu-latest

    steps:
      ### 1. 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      ### 2. Node.js 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      ### 3. package.json에서 버전 읽기
      - name: Read Version from package.json
        id: read_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Version from package.json: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      ### 4. Git PAT 설정
      - name: Configure Git to Use PAT
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}

      ### 5. 태그 생성 및 푸시
      - name: Create and Push Tag
        run: |
          TAG="v${{ env.VERSION }}"
          echo "Creating tag: $TAG"
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git tag $TAG
          git push origin $TAG

      ### 6. 릴리즈 노트 생성
      - name: Generate Release Notes
        id: generate_notes
        run: |
          echo "## Changes" > notes.md
          git log $(git describe --tags --abbrev=0)..HEAD --oneline >> notes.md
          echo "notes_body=$(cat notes.md)" >> $GITHUB_ENV

      ### 7. 릴리즈 생성
      - name: Create Release with Notes
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "Release v${{ env.VERSION }}"
          body: ${{ env.notes_body }}
          draft: false
          prerelease: false

      ### 8. 프로젝트 빌드 및 Docker 이미지 생성
      - name: Build Project and Create Docker Image
        env:
          CI: false
        run: |
          # 필요한 패키지 설치
          npm install

          # 프로젝트 빌드
          npm run build

          # Docker 이미지 빌드
          docker build -t narrativa-admin .

      ### 9. Docker 이미지 저장(TAR 파일 생성)
      - name: Save Docker Image as TAR
        run: |
          docker save narrativa-admin -o narrativa-admin.tar

      ### 10. TAR 파일 업로드
      - name: Upload TAR to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "${EC2_SSH_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
          scp -i ec2_key.pem -o StrictHostKeyChecking=no narrativa-admin.tar ubuntu@${{ secrets.EC2_HOST }}:~/

      ### 11. EC2에 접속하여 배포
      - name: Connect to EC2 and Deploy
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << EOF
          docker stop narrativa-admin || true
          docker rm narrativa-admin || true
          docker rmi narrativa-admin || true
          docker load -i narrativa-admin.tar
          docker run -d -p 3030:3030 --name narrativa-admin narrativa-admin
          EOF
